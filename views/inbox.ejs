<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Messaging System | Student Store</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
</head>
<link rel="stylesheet" href="../styles/inbox.css">
<body>
    <%- include('./partials/navbar') %>

    <div class="container flex-grow-1 d-flex flex-column">
        <div class="message-container">
            <!-- Sidebar -->
            <div class="sidebar">
                <h3 class="sidebar-title">Inbox</h3>
                <ul class="sidebar-menu">
                    <li><a class="<%= activeSection === 'notifications' ? 'active' : '' %>" data-section="api" href="#">Notifications</a></li>
                    <li><a class="<%= activeSection === 'messages' ? 'active' : '' %>" data-section="messages" href="/inbox/messages">Messages</a></li>
                </ul>
            </div>

            <!-- Main Message Area -->
            <section class="inbox-section <%= activeSection === 'api' ? 'active' : '' %>" id="api">
                <%- include('./partials/private_messaging') %>
            </section>

            <section class="inbox-section <%= activeSection === 'messages' ? 'active' : '' %>" id="messages">
                <!-- Message Cards Section -->
                <div class="message-cards">
                    <div class="message-cards-header">
                        <h4 class="message-cards-title">My Conversations</h4>
                        <div class="message-cards-actions">
                            <button type="button"><a href="/inbox/api">New Message</a></button>
                            <button type="button">Filter</button>
                        </div>
                    </div>
                    <div class="search-bar">
                        <input type="text" class="form-control" placeholder="Search messages...">
                    </div>
                    <div id="initiatedMessages"></div>
                </div>
            </section>
        </div>
    </div>

    <script src="https://cdn.socket.io/4.8.1/socket.io.min.js"></script>
    <script>
        //Handles message box 
        const socket = io();
        const form = document.getElementById('messageForm');
        const input = document.getElementById('messageInput');
        const messages = document.getElementById('messageBox');

        form?.addEventListener('submit', (e) => {
            e.preventDefault();
            if (input.value) {
                socket.emit('chat message', input.value);
                input.value = '';
            }
        });

        socket.on('chat message', (msg) => {
            console.log('Message received:', msg);
            const item = document.createElement('div');
            item.classList.add('message-content-sender');
            item.textContent = msg;
            messages.appendChild(item);
            messages.scrollTop = messages.scrollHeight;
        });
    </script>

    <script>
        const initiatedMessages = document.getElementById('initiatedMessages');
        let initiatedConversations = [<%- JSON.stringify(conversations) %>];

        function populateInitiatedMessages() {
            initiatedMessages.innerHTML = '';

            if (initiatedConversations.length === 0) {
                const emptyState = document.createElement('div');
                emptyState.classList.add('empty-state');
                emptyState.innerHTML = `
                    <h5>No conversations yet</h5>
                    <p>Start a new conversation by clicking the "New Message" button above.</p>
                `;
                initiatedMessages.appendChild(emptyState);
                return;
            }

            initiatedConversations.forEach((conv, index) => {
                const card = document.createElement('div');
                card.classList.add('message-card');
                if (index === 0) card.classList.add('active');
                card.dataset.conversationId = conv.userID;

                const avatar = document.createElement('img');
                avatar.src = conv.avatar;
                avatar.alt = conv.store_name;
                avatar.classList.add('message-card-avatar');

                const content = document.createElement('div');
                content.classList.add('message-card-content');

                const header = document.createElement('div');
                header.classList.add('message-card-header');

                const sender = document.createElement('div');
                sender.classList.add('message-card-sender');
                sender.textContent = conv.store_name;

                const date = document.createElement('div');
                date.classList.add('message-card-date');
                date.textContent = conv.date;

                header.appendChild(sender);
                header.appendChild(date);

                const preview = document.createElement('div');
                preview.classList.add('message-card-preview');
                preview.textContent = conv.lastMessage;

                const footer = document.createElement('div');
                footer.classList.add('message-card-footer');

                const tag = document.createElement('span');
                tag.classList.add('message-card-tag', 'initiated');
                tag.textContent = conv.tag;

                const actions = document.createElement('div');
                actions.classList.add('message-card-actions');

                const replyAction = document.createElement('span');
                replyAction.classList.add('message-card-action');
                replyAction.textContent = 'Reply';

                const archiveAction = document.createElement('span');
                archiveAction.classList.add('message-card-action');
                archiveAction.textContent = 'Archive';

                actions.appendChild(replyAction);
                actions.appendChild(archiveAction);

                footer.appendChild(tag);
                footer.appendChild(actions);

                content.appendChild(header);
                content.appendChild(preview);
                content.appendChild(footer);

                card.appendChild(avatar);
                card.appendChild(content);
                card.value = conv.conversationID;

                card.addEventListener('click', function(event) {
                    if (event.target.classList.contains('message-card-action')) return;
                    document.querySelectorAll('.message-card').forEach(c => c.classList.remove('active'));
                    this.classList.add('active');
                    window.location.href = `/message/${card.value}`;
                });

                initiatedMessages.appendChild(card);
            });
        }

        document.querySelectorAll('.sidebar-menu a').forEach(link => {
            link.addEventListener('click', async function (e) {
                const href = this.getAttribute('href');
                const sectionId = this.getAttribute('data-section');
                if (href && !sectionId) return;

                e.preventDefault();
                document.querySelectorAll('.inbox-section').forEach(section => {
                    section.classList.remove('active');
                });

                if (sectionId) {
                    document.getElementById(sectionId).classList.add('active');
                    history.pushState(null, '', `/messages/${sectionId}`);

                    if (sectionId === 'messages') {
                        try {
                            const response = await fetch('/inbox/messages', {
                                method: 'GET',
                                headers: { 'Content-Type': 'text/html' },
                            });
                            if (!response.ok) throw new Error(`HTTP error! status: ${response.status}`);
                            const data = await response.text();
                        } catch (error) {
                            console.error('Error fetching orders:', error);
                        }
                    }
                }

                document.querySelectorAll('.sidebar-menu a').forEach(navLink => {
                    navLink.classList.toggle('active', navLink.getAttribute('data-section') === sectionId);
                });
            });
        });

        populateInitiatedMessages();
    </script>
</body>
</html>